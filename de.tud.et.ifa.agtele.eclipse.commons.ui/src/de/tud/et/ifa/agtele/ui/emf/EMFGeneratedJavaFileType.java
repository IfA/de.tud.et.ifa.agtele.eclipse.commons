/**
 * 
 */
package de.tud.et.ifa.agtele.ui.emf;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.EPackage;

/**
 * The various types of JavaFiles generated by the GenModel.
 *
 * @author mfreund
 */
@SuppressWarnings("javadoc")
public enum EMFGeneratedJavaFileType {

	// model
	INTERFACE(""), FACTORY("Factory"), PACKAGE("Package"), IMPL("Impl"), FACTORYIMPLY("FactoryImpl"), PACKAGEIMPL(
			"PackageImpl"), ADAPTERFACTORY("AdapterFactory"), SWITCH("Switch"), VALIDATOR("Validator"),
	// edit
	ITEMPROVIDER("ItemProvider"), ITEMPROVIDERADAPTERFACTORY("ItemProviderAdapterFactory"),
	// editor
	EDITOR("Editor"), ACTIONBARCONTRIBUTOR("ActionBarContributor");

	private final String fileEnding;

	EMFGeneratedJavaFileType(String fileEnding) {

		this.fileEnding = fileEnding;
	}

	/**
	 * Returns the special file ending associated with this {@link EMFGeneratedJavaFileType}.
	 *
	 * @return The {@link #fileEnding}.
	 */
	public String getFileEnding() {

		return this.fileEnding;
	}

	/**
	 * Return the {@link EMFGeneratedJavaFileType} of the java file with the given name.
	 *
	 * @param javaFileName
	 *            The name of a java file (including or excluding the trailing '.java').
	 * @return The {@link EMFGeneratedJavaFileType}.
	 */
	public static EMFGeneratedJavaFileType getFileType(String javaFileName) {

		String f = javaFileName.replaceAll(".java$", "");

		if (f.endsWith(ACTIONBARCONTRIBUTOR.fileEnding)) {
			return ACTIONBARCONTRIBUTOR;
		} else if (f.endsWith(EDITOR.fileEnding)) {
			return EMFGeneratedJavaFileType.EDITOR;
		} else if (f.endsWith(ITEMPROVIDERADAPTERFACTORY.fileEnding)) {
			return EMFGeneratedJavaFileType.ITEMPROVIDERADAPTERFACTORY;
		} else if (f.endsWith(ITEMPROVIDER.fileEnding)) {
			return EMFGeneratedJavaFileType.ITEMPROVIDER;
		} else if (f.endsWith(VALIDATOR.fileEnding)) {
			return EMFGeneratedJavaFileType.VALIDATOR;
		} else if (f.endsWith(SWITCH.fileEnding)) {
			return EMFGeneratedJavaFileType.SWITCH;
		} else if (f.endsWith(ADAPTERFACTORY.fileEnding)) {
			return EMFGeneratedJavaFileType.ADAPTERFACTORY;
		} else if (f.endsWith(PACKAGEIMPL.fileEnding)) {
			return EMFGeneratedJavaFileType.PACKAGEIMPL;
		} else if (f.endsWith(FACTORYIMPLY.fileEnding)) {
			return EMFGeneratedJavaFileType.FACTORYIMPLY;
		} else if (f.endsWith(IMPL.fileEnding)) {
			return EMFGeneratedJavaFileType.IMPL;
		} else if (f.endsWith(PACKAGE.fileEnding)) {
			return EMFGeneratedJavaFileType.PACKAGE;
		} else if (f.endsWith(FACTORY.fileEnding)) {
			return EMFGeneratedJavaFileType.FACTORY;
		} else {
			return EMFGeneratedJavaFileType.INTERFACE;
		}
	}

	/**
	 * Whether this {@link EMFGeneratedJavaFileType} represents an element of the generated 'model' code.
	 *
	 * @return
	 */
	public boolean isModelType() {

		return this.equals(INTERFACE) || this.equals(FACTORY) || this.equals(PACKAGE) || this.equals(IMPL)
				|| this.equals(FACTORYIMPLY) || this.equals(PACKAGEIMPL) || this.equals(ADAPTERFACTORY)
				|| this.equals(SWITCH) || this.equals(VALIDATOR);
	}

	/**
	 * Whether this {@link EMFGeneratedJavaFileType} represents an element of the generated 'edit' code.
	 *
	 * @return
	 */
	public boolean isEditType() {

		return this.equals(ITEMPROVIDER) || this.equals(ITEMPROVIDERADAPTERFACTORY);
	}

	/**
	 * Whether this {@link EMFGeneratedJavaFileType} represents an element of the generated 'edit' item provider
	 * code.
	 *
	 * @return
	 */
	public boolean isEditItemProviderType() {

		return this.equals(ITEMPROVIDER);
	}

	/**
	 * Whether this {@link EMFGeneratedJavaFileType} represents an element of the generated 'editor' code.
	 *
	 * @return
	 */
	public boolean isEditorType() {

		return this.equals(EDITOR) || this.equals(ACTIONBARCONTRIBUTOR);
	}

	/**
	 * Whether this {@link EMFGeneratedJavaFileType} represents an element that was generated based on an
	 * {@link EClass}.
	 *
	 * @return
	 */
	public boolean isClassType() {

		return this.equals(INTERFACE) || this.equals(IMPL) || this.equals(ITEMPROVIDER);
	}

	/**
	 * Whether this {@link EMFGeneratedJavaFileType} represents a class implementation within the generated 'model'
	 * code.
	 *
	 * @return
	 */
	public boolean isClassImplementationType() {

		return this.equals(IMPL);
	}

	/**
	 * Whether this {@link EMFGeneratedJavaFileType} represents an element that was generated based on an
	 * {@link EPackage}.
	 *
	 * @return
	 */
	public boolean isPackageType() {

		return !this.isClassType();
	}

	/**
	 * Returns the base of the given <em>javaFileName</em>.
	 *
	 * @param javaFileName
	 *            The name of a Java File.
	 * @return The given <em>javaFileName</em> without any optional trailing '.java' and without the special
	 *         {@link #getFileEnding()} of its {@link EMFGeneratedJavaFileType type}.
	 */
	public static String getBaseName(String javaFileName) {

		EMFGeneratedJavaFileType type = EMFGeneratedJavaFileType.getFileType(javaFileName);
		String ret = javaFileName.replaceAll(".java$", "");
		return type == null ? ret : ret.replaceAll(type.getFileEnding() + "$", "");
	}
}