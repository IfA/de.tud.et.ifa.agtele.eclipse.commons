/*******************************************************************************
 * Copyright (C) 2016-2018 Institute of Automation, TU Dresden.
 * 
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 * 
 * Contributors:
 *     Institute of Automation, TU Dresden - initial API and implementation
 ******************************************************************************/
package de.tud.et.ifa.agtele.ui.handlers;

import org.eclipse.core.commands.AbstractHandler;
import org.eclipse.core.commands.ExecutionEvent;
import org.eclipse.core.commands.ExecutionException;
import org.eclipse.jdt.internal.core.CompilationUnit;
import org.eclipse.jdt.internal.ui.javaeditor.CompilationUnitEditor;
import org.eclipse.jdt.internal.ui.javaeditor.EditorUtility;
import org.eclipse.jface.viewers.ISelection;
import org.eclipse.ui.IEditorPart;
import org.eclipse.ui.part.FileEditorInput;

import de.tud.et.ifa.agtele.ui.emf.GeneratedEMFCodeHelper;
import de.tud.et.ifa.agtele.ui.util.UIHelper;

/**
 * An {@link AbstractHandler} that does something , based on a selection in a Java file containing code generated by
 * EMF.
 *
 * @author mfreund
 *
 */
@SuppressWarnings("restriction")
public abstract class AbstractGeneratedEMFCodeHandler extends AbstractHandler {

	/**
	 * The {@link GeneratedEMFCodeHelper} representing the {@link CompilationUnit} that this handler operates on.
	 */
	protected GeneratedEMFCodeHelper helper;

	/**
	 * The {@link CompilationUnitEditor} that this handler operates on.
	 */
	protected CompilationUnitEditor javaEditor;

	/**
	 * The current {@link ISelection} in the {@link #javaEditor}.
	 */
	protected ISelection javaSelection;

	/**
	 * Show an error to the user by sending an error to the status line.
	 *
	 * @param errorMessage
	 *            The message to display to the user.
	 */
	protected void showError(String errorMessage) {

		UIHelper.getCurrentEditor().getEditorSite().getActionBars().getStatusLineManager()
				.setErrorMessage(errorMessage);
	}

	/**
	 * Sets a status message to the status bar.
	 *
	 * @param statusMessage
	 */
	protected void showStatus(String statusMessage) {

		UIHelper.getCurrentEditor().getEditorSite().getActionBars().getStatusLineManager().setMessage(statusMessage);
	}

	/**
	 * Clears the error from the status line.
	 */
	protected void clearError() {

		UIHelper.getCurrentEditor().getEditorSite().getActionBars().getStatusLineManager().setErrorMessage(null);
	}

	/**
	 * This initializes the {@link #helper}, {@link #javaEditor}, and {@link #javaSelection} variables of this handler
	 * for the current state of the given {@link CompilationUnitEditor}.
	 */
	protected void init(CompilationUnitEditor javaEditor) {

		this.javaEditor = javaEditor;

		this.javaSelection = this.javaEditor.getSelectionProvider().getSelection();

		// In order to prevent manual parsing of the Java document, we make use of the CompilationUnit type that
		// represents a structured Java document
		//
		CompilationUnit root = this.determineCompilationUnit((IEditorPart) this.javaEditor);

		// Prevent unnecessary multiple initialization of the 'helper'
		//
		if (this.helper == null || !this.helper.getCompilationUnit().equals(root)) {
			this.helper = new GeneratedEMFCodeHelper(root);
		}
	}

	@Override
	public boolean isEnabled() {

		// test if the menu is actually shown in an Editor
		if (!(UIHelper.getCurrentEditorInput() instanceof FileEditorInput)) {
			return false;
		}

		// test if the menu is shown in a Java editor
		IEditorPart currentEditor = UIHelper.getCurrentEditor();
		if (!(currentEditor instanceof CompilationUnitEditor)) {
			return false;
		}

		this.init((CompilationUnitEditor) currentEditor);

		return super.isEnabled();
	}

	/**
	 * This implementation checks if the handler {@link #isEnabled() is enabled} and (if it is) then just calls
	 * {@link #doExecute()}.
	 * <p />
	 * Note: Clients should override {@link #doExecute()} instead of overwriting this in order to be able to rely on
	 * properly initialized {@link #helper}, {@link #javaEditor}, and {@link #javaSelection} variables of this handler.
	 * <p />
	 * Note: Any exceptions thrown by {@link #doExecute()} are logged and {@link #showError(String) shown to the user}
	 * via the status line.
	 *
	 * @see #doExecute()
	 */
	@Override
	public Object execute(ExecutionEvent event) throws ExecutionException {

		this.clearError();

		if (!this.isEnabled()) {
			this.showError("Internal error while executing the handler. Handler is not enabled...");
		}

		try {

			this.doExecute();

		} catch (Exception e) {

			this.showError(e.getMessage());
			UIHelper.log(e);

		}

		return null;
	}

	/**
	 * This is the overrideable implementation of {@link #execute(ExecutionEvent)}. < p/> Note: Clients should override
	 * this instead of directly overriding {@link #execute(ExecutionEvent)} because this ensures that the
	 * {@link #helper} is already initialized properly based on the content of the current editor.
	 *
	 * @throws Exception
	 *             If anything goes wrong during the execution.
	 */
	protected abstract void doExecute() throws Exception;

	/**
	 * Determines the {@link org.eclipse.jdt.core.dom.CompilationUnit}, if the current editor is a Java editor.
	 *
	 * @return
	 */
	protected CompilationUnit determineCompilationUnit() {

		return (CompilationUnit) EditorUtility.getEditorInputJavaElement(UIHelper.getCurrentEditor(), false);
	}

	/**
	 * Determines the @link {@link org.eclipse.jdt.core.dom.CompilationUnit}, if the current editor is a Java editor.
	 *
	 * @param part
	 *            The compilation unit editor part.
	 * @return
	 */
	protected CompilationUnit determineCompilationUnit(IEditorPart part) {

		return (CompilationUnit) EditorUtility.getEditorInputJavaElement(part, false);
	}

}
